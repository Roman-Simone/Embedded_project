/*
 * todo.c
 *
 *  Created on: 28 gen 2023
 *      Author: simoneroman
 */
Le modalità di autoparking (`auto_park_mode()`), segui la linea (`rail_mode()`) e la modalità che farà le ultime mosse all’indietro (`last_moves()`) sono ininterrompibili, per questo ho messo dei semafori.

Le modalità `auto_park_mode()` e `last_moves()` terminano quando “lo decide la macchina”, mentre la modalità `rail_mode()` può essere interrotta in qualsiasi momento dal controller.

In joystick mode per ora non si può fare niente all’infuori di guidare la macchina da remoto, però si potrebbe cambiare questa implementazione rendendo possibile per esempio accendere i fari mentre si sta guidando la macchina.

Nel menù `second_screen` , le modalità non interrompibili (elencate sopra) hanno riquadri neri, mentre le altre due (`auto_lights` e `keep_distance`) hanno dei riquadri rossi se sono disattivate o verdi se sono attivate.

Ogni funzione che non termina da sola (ha bisogno di un interrupt da parte della macchinetta) in particolare sto parlando di `las_moves_mode` e `auto_park_mode`, ha bisogno di un meccanismo (per ora c’è solo un `while(){}`) che controlli se la macchina ha finito —> comunicazione bilaterale tra le ESP32.

# Code

```c
#include <ti/devices/msp432p4xx/inc/msp.h>
#include <ti/devices/msp432p4xx/driverlib/driverlib.h>
#include <ti/grlib/grlib.h>
#include "LcdDriver/Crystalfontz128x128_ST7735.h"
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>
#include <time.h>

/* Graphic library context */
Graphics_Context sContext;
Graphics_Context invisibleContext;

volatile bool keep_distance_flag = 0;

static uint16_t resultsBuffer[2];

uint8_t TXData = 1;
uint8_t RXData = 0;

volatile int semaforo = 1;   //semaforo generale per mandare la roba in UART

volatile int cont = 0;    //semaforo per mandare prima X e poi Y

volatile int sel = 0; //general selector --> for back button

//sel VALUES:
//0 --> WELCOME screen
//1 --> prima schermata di selezione
//2 --> joystick mode no kd
//3 --> joystick mode kd
//4 --> auto_park

volatile int sel1 = 0; //menu selector --> for joystick button and selector

//sel1 VALUES:
//0 --> joystick mode no kd
//1 --> joystick mode kd
//2 --> auto_park











/*void ADC14_IRQHandler(void)
{
    //sel values
    //0 --> WELCOME screen,
    //1 --> prima schermata di selezione,
    //2 --> joystick mode no kd,
    //3 --> joystick mode kd,
    //4 --> auto_park

    uint64_t status;

    status = ADC14_getEnabledInterruptStatus();
    ADC14_clearInterruptFlag(status);

    if(status & ADC_INT1){

    }
}

void EUSCIA2_IRQHandler(void)
{
    uint32_t status = UART_getEnabledInterruptStatus(EUSCI_A2_BASE);

    if(status & EUSCI_A_UART_RECEIVE_INTERRUPT_FLAG)
    {
        RXData = UART_receiveData(EUSCI_A2_BASE);
        printf("son dentro %d \n",RXData);

        /*if(RXData == 2)              // Check value
        {
            GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);

        }
        if(RXData == 1)              // Check value
        {
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);

        }
        if(RXData == 0)              // Check value
        {
            GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
            GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
        }

        Interrupt_disableSleepOnIsrExit();
    }
}*/

int main(void)
{

    _init();

    while(1){
        /* low power mode */
        PCM_gotoLPM0();
        Interrupt_enableSleepOnIsrExit();
    }
}
```
